{
    "name": "Image Comparison and Best Photo Selection",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/api/compare-images",
          "options": {}
        },
        "name": "Webhook Trigger",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          300
        ],
        "webhookId": "image-comparison"
      },
      {
        "parameters": {},
        "name": "When clicking \"Execute Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          250,
          450
        ]
      },
      {
        "parameters": {
          "functionCode": "// Extract request parameters\nconst inputData = $input.first().json;\n\n// Extract parameters from input data\nlet sourceImageId = '';\nlet targetImageIds = [];\nlet customerName = '';\n\n// Check if data is in body (webhook format) or direct (manual execution)\nif (inputData.body) {\n  sourceImageId = inputData.body.sourceImageId || '';\n  targetImageIds = inputData.body.targetImageIds || [];\n  customerName = inputData.body.customerName || 'Customer';\n} else {\n  sourceImageId = inputData.sourceImageId || '';\n  targetImageIds = inputData.targetImageIds || [];\n  customerName = inputData.customerName || 'Customer';\n}\n\n// Basic validation\nif (!sourceImageId || targetImageIds.length === 0) {\n  return [\n    {\n      json: {\n        success: false,\n        error: 'Source image ID and target image IDs are required'\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      sourceImageId,\n      targetImageIds,\n      customerName,\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
        },
        "name": "Extract Parameters",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          450,
          400
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5000/api/images/{{ $json.sourceImageId }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Source Image",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          650,
          300
        ]
      },
      {
        "parameters": {
          "functionCode": "// Extract target image IDs for the API request\nconst targetImageIds = $input.first().json.targetImageIds;\n\n// Construct the API query parameter\nlet targetIdsParam = '';\nif (Array.isArray(targetImageIds)) {\n  targetIdsParam = targetImageIds.join(',');\n}\n\nreturn [\n  {\n    json: {\n      targetIdsParam\n    }\n  }\n];"
        },
        "name": "Prepare Target IDs",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          650,
          450
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5000/api/images?ids={{ $json.targetIdsParam }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Target Images",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          850,
          450
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "http://localhost:5000/api/deepface/compare-multiple",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "options": {},
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "sourceImageId",
                "value": "={{ $node[\"Extract Parameters\"].json.sourceImageId }}"
              },
              {
                "name": "targetImageIds",
                "value": "={{ $node[\"Extract Parameters\"].json.targetImageIds }}"
              },
              {
                "name": "model",
                "value": "VGG-Face"
              },
              {
                "name": "metric",
                "value": "cosine"
              }
            ]
          }
        },
        "name": "Compare Faces API",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{ $json.success }}",
                "value2": true
              }
            ]
          }
        },
        "name": "If Comparison Successful",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Process comparison results\nconst comparisonData = $input.first().json;\nconst inputParams = $node['Extract Parameters'].json;\n\n// Get the comparison results\nconst comparisons = comparisonData.comparisons || [];\n\n// Sort by similarity score (descending)\ncomparisons.sort((a, b) => b.similarity - a.similarity);\n\n// Select the best images based on similarity threshold\nconst bestImages = comparisons\n  .filter(comp => comp.similarity >= 0.6)\n  .map(comp => comp.targetImageId);\n\n// Make sure to include source image\nif (!bestImages.includes(inputParams.sourceImageId)) {\n  bestImages.unshift(inputParams.sourceImageId);\n}\n\n// Limit to maximum 5 images\nconst selectedImages = bestImages.slice(0, 5);\n\nreturn [\n  {\n    json: {\n      sourceImageId: inputParams.sourceImageId,\n      selectedImages,\n      customerName: inputParams.customerName,\n      totalCompared: comparisons.length,\n      success: true\n    }\n  }\n];"
        },
        "name": "Process Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1450,
          300
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "http://localhost:5000/api/drive/folders",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "options": {},
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "name",
                "value": "={{ \"Best Photos - \" + $json.customerName + \" - \" + $now.format(\"YYYY-MM-DD\") }}"
              },
              {
                "name": "parentId",
                "value": "root"
              }
            ]
          }
        },
        "name": "Create Drive Folder",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          300
        ]
      },
      {
        "parameters": {
          "mode": "jsonData",
          "jsonData": "={{ $json.selectedImages }}",
          "options": {}
        },
        "name": "Split Selected Images",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 2,
        "position": [
          1650,
          450
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5000/api/images/{{ $json }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Image Details",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1850,
          450
        ]
      },
      {
        "parameters": {
          "functionCode": "// Extract file ID from URL\nconst imageData = $input.first().json.data;\nconst driveFolder = $node['Create Drive Folder'].json.data;\n\n// Extract file ID from the URL or path\nlet fileId = '';\n\n// Try to extract Google Drive ID pattern from URL\nif (imageData.url) {\n  const match = imageData.url.match(/[-\\w]{25,}/);\n  if (match) {\n    fileId = match[0];\n  }\n}\n\n// If not found, try to extract from driveFileId field if it exists\nif (!fileId && imageData.driveFileId) {\n  fileId = imageData.driveFileId;\n}\n\nreturn [\n  {\n    json: {\n      imageId: imageData.id,\n      fileId: fileId,\n      fileName: imageData.filename || imageData.originalName,\n      destinationFolderId: driveFolder.id\n    }\n  }\n];"
        },
        "name": "Extract File ID",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          2050,
          450
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "http://localhost:5000/api/drive/files/copy",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "options": {},
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "fileId",
                "value": "={{ $json.fileId }}"
              },
              {
                "name": "destinationFolderId",
                "value": "={{ $json.destinationFolderId }}"
              },
              {
                "name": "newName",
                "value": "={{ $json.fileName }}"
              }
            ]
          }
        },
        "name": "Copy File to Folder",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2250,
          450
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "http://localhost:5000/api/drive/permissions/public",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "options": {},
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "fileId",
                "value": "={{ $node[\"Create Drive Folder\"].json.data.id }}"
              }
            ]
          }
        },
        "name": "Make Folder Public",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2450,
          300
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "combinationMode": "multiplex",
          "options": {}
        },
        "name": "Combine Results",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2450,
          450
        ]
      },
      {
        "parameters": {
          "functionCode": "// Prepare the response message\nconst inputItems = $input.all();\n\n// Get the folder information\nconst publicFolder = inputItems[0].json.data;\n\n// Get all copied files\nconst copiedFiles = inputItems.slice(1).map(item => item.json.data);\n\n// Count successful copies\nconst successfulCopies = copiedFiles.filter(file => file && file.id).length;\n\n// Create response message\nconst responseMessage = `✅ *Best Photos Selected!*\\n\\n• Selected ${successfulCopies} best photos based on similarity and quality\\n• Created folder \"${publicFolder.name}\"\\n• Public link: ${publicFolder.publicLink}\\n\\nYou can access your photos through the link above.`;\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: responseMessage,\n      folderName: publicFolder.name,\n      publicLink: publicFolder.publicLink,\n      fileCount: successfulCopies\n    }\n  }\n];"
        },
        "name": "Prepare Response",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          2650,
          400
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "http://localhost:5000/api/chatbot/send",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "options": {},
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "userId",
                "value": "=system"
              },
              {
                "name": "message",
                "value": "={{ $json.message }}"
              },
              {
                "name": "platform",
                "value": "zalo"
              }
            ]
          }
        },
        "name": "Send Notification",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2850,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Error response\nreturn [\n  {\n    json: {\n      success: false,\n      error: 'Failed to compare images',\n      message: 'There was an error processing your request. Please try again.'\n    }\n  }\n];"
        },
        "name": "Error Response",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1450,
          500
        ]
      }
    ],
    "connections": {
      "Webhook Trigger": {
        "main": [
          [
            {
              "node": "Extract Parameters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Extract Parameters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Parameters": {
        "main": [
          [
            {
              "node": "Get Source Image",
              "type": "main",
              "index": 0
            },
            {
              "node": "Prepare Target IDs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Source Image": {
        "main": [
          [
            {
              "node": "Compare Faces API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Target IDs": {
        "main": [
          [
            {
              "node": "Get Target Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Target Images": {
        "main": [
          [
            {
              "node": "Compare Faces API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Compare Faces API": {
        "main": [
          [
            {
              "node": "If Comparison Successful",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Comparison Successful": {
        "main": [
          [
            {
              "node": "Process Results",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Error Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Results": {
        "main": [
          [
            {
              "node": "Create Drive Folder",
              "type": "main",
              "index": 0
            },
            {
              "node": "Split Selected Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create Drive Folder": {
        "main": [
          [
            {
              "node": "Make Folder Public",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Selected Images": {
        "main": [
          [
            {
              "node": "Get Image Details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Image Details": {
        "main": [
          [
            {
              "node": "Extract File ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract File ID": {
        "main": [
          [
            {
              "node": "Copy File to Folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Copy File to Folder": {
        "main": [
          [
            {
              "node": "Combine Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Make Folder Public": {
        "main": [
          [
            {
              "node": "Combine Results",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Combine Results": {
        "main": [
          [
            {
              "node": "Prepare Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Response": {
        "main": [
          [
            {
              "node": "Send Notification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    }
  } 
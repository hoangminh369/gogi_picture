{
    "name": "Image Selection",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/api/select-images",
          "options": {}
        },
        "name": "Webhook Trigger",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          300
        ],
        "webhookId": "image-selection"
      },
      {
        "parameters": {},
        "name": "When clicking \"Execute Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          250,
          450
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/images?status=processed&limit=100",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Processed Images",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          450,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Group images by face characteristics\nconst inputItems = $input.all();\nconst images = inputItems[0].json.data || [];\n\n// Return early if no images to process\nif (images.length === 0) {\n  return [\n    {\n      json: {\n        success: true,\n        message: 'No images to select from',\n        selectedImages: []\n      }\n    }\n  ];\n}\n\n// Group images by potential people/faces using face count\nconst groupedImages = {};\n\nfor (const image of images) {\n  const key = `faces_${image.faceCount}`;\n  \n  if (!groupedImages[key]) {\n    groupedImages[key] = [];\n  }\n  \n  groupedImages[key].push(image);\n}\n\nreturn [\n  {\n    json: {\n      success: true,\n      imageGroups: groupedImages\n    }\n  }\n];"
        },
        "name": "Group Images",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          650,
          400
        ]
      },
      {
        "parameters": {
          "mode": "jsonData",
          "jsonData": "={{ $json.imageGroups }}",
          "options": {}
        },
        "name": "Split by Group",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 2,
        "position": [
          850,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Select best images from each group\nconst images = $json.map(item => item.json);\n\n// Skip groups with no images\nif (!images || images.length === 0) {\n  return [];\n}\n\n// Sort by quality score (descending)\nconst sortedImages = [...images].sort((a, b) => {\n  // Higher quality score is better\n  const qualityDiff = (b.qualityScore || 0) - (a.qualityScore || 0);\n  \n  if (qualityDiff !== 0) {\n    return qualityDiff;\n  }\n  \n  // If quality is the same, check if faces were detected\n  if (a.faceDetected !== b.faceDetected) {\n    return a.faceDetected ? -1 : 1;\n  }\n  \n  // If face detection status is the same, check face count\n  return (b.faceCount || 0) - (a.faceCount || 0);\n});\n\n// Select top 3 images or fewer if less available\nconst selectedCount = Math.min(3, sortedImages.length);\nconst selectedImages = sortedImages.slice(0, selectedCount);\n\nreturn [\n  {\n    json: {\n      groupId: $json[0]?.groupKey || 'unknown',\n      totalImages: images.length,\n      selectedImages: selectedImages.map(img => ({\n        id: img.id,\n        fileName: img.fileName,\n        qualityScore: img.qualityScore,\n        faceCount: img.faceCount\n      }))\n    }\n  }\n];"
        },
        "name": "Select Best Images",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "combinationMode": "mergeByPosition",
          "options": {}
        },
        "name": "Combine Selections",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Prepare the selected images for saving\nconst inputItems = $input.all();\nlet allSelectedImages = [];\n\n// Collect all selected images from all groups\ninputItems.forEach(item => {\n  if (item.json.selectedImages && Array.isArray(item.json.selectedImages)) {\n    allSelectedImages = allSelectedImages.concat(item.json.selectedImages);\n  }\n});\n\n// Update status of selected images\nreturn allSelectedImages.map(image => {\n  return {\n    json: {\n      id: image.id,\n      status: 'selected'\n    }\n  };\n});"
        },
        "name": "Prepare Selected Images",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1450,
          400
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "name": "Process Each Selected",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 2,
        "position": [
          1650,
          400
        ]
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "=http://localhost:5678/api/images/{{ $json.id }}/status",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ {\"status\": \"selected\"} }}"
        },
        "name": "Mark as Selected",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1850,
          400
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=https://www.googleapis.com/drive/v3/files/{{ $json.id }}?alt=media",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "options": {
            "redirect": {
              "redirect": "follow"
            },
            "response": {
              "response": {
                "fullResponse": true,
                "responseFormat": "file"
              }
            }
          }
        },
        "name": "Download Image",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2050,
          400
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "multipart/related"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "metadata",
                "value": "={ \"name\": \"{{ $json.name }}\", \"parents\": [\"{{ $env.GOOGLE_DRIVE_SELECTED_FOLDER_ID }}\"] }"
              },
              {
                "name": "file",
                "value": "={{ $binary.data.data }}"
              }
            ]
          }
        },
        "name": "Save to Selected Folder",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2250,
          400
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "workflowId": "=workflow-chatbot-response-id"
        },
        "name": "Notify Users",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          2450,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Log selection results\nconst items = $input.all();\nconst selectedImagesCount = items.length;\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: `Image selection completed at ${new Date().toISOString()}`,\n      selectedCount: selectedImagesCount,\n      groups: Object.keys(items.reduce((acc, item) => {\n        if (item.json.groupId) {\n          acc[item.json.groupId] = true;\n        }\n        return acc;\n      }, {})).length\n    }\n  }\n];"
        },
        "name": "Log Selection Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          2650,
          400
        ]
      }
    ],
    "connections": {
      "Webhook Trigger": {
        "main": [
          [
            {
              "node": "Get Processed Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Get Processed Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Processed Images": {
        "main": [
          [
            {
              "node": "Group Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Group Images": {
        "main": [
          [
            {
              "node": "Split by Group",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split by Group": {
        "main": [
          [
            {
              "node": "Select Best Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Select Best Images": {
        "main": [
          [
            {
              "node": "Combine Selections",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine Selections": {
        "main": [
          [
            {
              "node": "Prepare Selected Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Selected Images": {
        "main": [
          [
            {
              "node": "Process Each Selected",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Each Selected": {
        "main": [
          [
            {
              "node": "Mark as Selected",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Mark as Selected": {
        "main": [
          [
            {
              "node": "Download Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Image": {
        "main": [
          [
            {
              "node": "Save to Selected Folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save to Selected Folder": {
        "main": [
          [
            {
              "node": "Notify Users",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notify Users": {
        "main": [
          [
            {
              "node": "Log Selection Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "error-handling"
    },
    "tags": [
      {
        "name": "core-workflows"
      },
      {
        "name": "image-processing"
      }
    ],
    "versionId": "1",
    "id": "image-selection",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
{
    "name": "DeepFace Processing",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/api/process-image",
          "options": {}
        },
        "name": "Webhook Trigger",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          300
        ],
        "webhookId": "deepface-process"
      },
      {
        "parameters": {},
        "name": "When clicking \"Execute Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          250,
          450
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/images?status=uploaded&limit=10",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Images to Process",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          450,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Update image status to 'processing'\nconst inputItems = $input.all();\nconst images = inputItems[0].json.data || [];\n\n// Return early if no images to process\nif (images.length === 0) {\n  return [\n    {\n      json: {\n        success: true,\n        message: 'No images to process',\n        images: []\n      }\n    }\n  ];\n}\n\n// Prepare images for processing\nreturn images.map(image => {\n  return {\n    json: {\n      id: image.id,\n      fileId: image.fileId,\n      fileName: image.fileName,\n      url: image.webViewLink,\n      thumbnailUrl: image.thumbnailLink,\n      status: 'processing'\n    }\n  };\n});"
        },
        "name": "Prepare Images",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          650,
          400
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "name": "Process Each Image",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 2,
        "position": [
          850,
          400
        ]
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "=http://localhost:5678/api/images/{{ $json.id }}/status",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ {\"status\": \"processing\"} }}"
        },
        "name": "Update Status to Processing",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5000/api/images/analyze-face",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={ \"imageUrl\": \"{{ $json.url }}\", \"imageId\": \"{{ $json.id }}\", \"actions\": [\"age\", \"gender\", \"emotion\", \"race\"] }"
        },
        "name": "Call Local DeepFace Service",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.success }}",
                "value2": "true"
              }
            ]
          }
        },
        "name": "If Successful Analysis",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1450,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Process face detection results\nconst inputItem = $input.item;\nconst imageData = $input.first(1)[0].json;\nconst analysisResult = inputItem.json;\n\n// Extract face data from local DeepFace service\nconst faces = analysisResult.analyses || [];\nconst faceCount = faces.length;\n\n// Calculate overall quality score\nlet overallQualityScore = analysisResult.qualityScore || 0;\nif (faceCount > 0 && overallQualityScore === 0) {\n  // If no quality score from analysis, use a default based on face count\n  overallQualityScore = Math.min(80 + (faceCount * 5), 100);\n}\n\n// Map face data to database format\nconst faceAnalyses = faces.map((face, index) => {\n  return {\n    imageId: imageData.id,\n    faceBox: face.region || {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    confidence: 0.9, // Default confidence for local processing\n    qualityScore: overallQualityScore,\n    age: face.age,\n    gender: face.gender,\n    emotions: face.emotion || {\n      happy: 0,\n      sad: 0,\n      angry: 0,\n      surprised: 0,\n      neutral: 0\n    },\n    race: face.race\n  };\n});\n\nreturn [\n  {\n    json: {\n      id: imageData.id,\n      faceDetected: faceCount > 0,\n      faceCount: faceCount,\n      qualityScore: overallQualityScore,\n      status: \"processed\",\n      faces: faceAnalyses\n    }\n  }\n];"
        },
        "name": "Process Analysis Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1650,
          350
        ]
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "=http://localhost:5678/api/images/{{ $json.id }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ $json }}"
        },
        "name": "Update Image with Analysis",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1850,
          350
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/faces",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ {\"faces\": $json.faces} }}"
        },
        "name": "Save Face Analysis",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2050,
          350
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "=http://localhost:5678/api/images/{{ $json.id }}/status",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ {\"status\": \"error\"} }}"
        },
        "name": "Mark as Error",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          500
        ]
      },
      {
        "parameters": {
          "resumeOnFail": true,
          "options": {}
        },
        "name": "Continue with Next",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2250,
          400
        ]
      },
      {
        "parameters": {
          "workflowId": "=workflow-image-selection-id"
        },
        "name": "Trigger Selection Process",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          2450,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Log processing results\nconst items = $input.all();\nconst successfulItems = items.filter(item => item.json.status === 'processed');\nconst errorItems = items.filter(item => item.json.status === 'error');\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: `Local DeepFace processing completed at ${new Date().toISOString()}`,\n      processed: successfulItems.length,\n      errors: errorItems.length,\n      totalFaces: successfulItems.reduce((sum, item) => sum + (item.json.faceCount || 0), 0)\n    }\n  }\n];"
        },
        "name": "Log Processing Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          2650,
          400
        ]
      }
    ],
    "connections": {
      "Webhook Trigger": {
        "main": [
          [
            {
              "node": "Get Images to Process",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Get Images to Process",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Images to Process": {
        "main": [
          [
            {
              "node": "Prepare Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Images": {
        "main": [
          [
            {
              "node": "Process Each Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Each Image": {
        "main": [
          [
            {
              "node": "Update Status to Processing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Status to Processing": {
        "main": [
          [
            {
              "node": "Call Local DeepFace Service",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Call Local DeepFace Service": {
        "main": [
          [
            {
              "node": "If Successful Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Successful Analysis": {
        "main": [
          [
            {
              "node": "Process Analysis Results",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Mark as Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Analysis Results": {
        "main": [
          [
            {
              "node": "Update Image with Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Image with Analysis": {
        "main": [
          [
            {
              "node": "Save Face Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save Face Analysis": {
        "main": [
          [
            {
              "node": "Continue with Next",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Mark as Error": {
        "main": [
          [
            {
              "node": "Continue with Next",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Continue with Next": {
        "main": [
          [
            {
              "node": "Trigger Selection Process",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Trigger Selection Process": {
        "main": [
          [
            {
              "node": "Log Processing Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "error-handling"
    },
    "tags": [
      {
        "name": "core-workflows"
      },
      {
        "name": "ai-processing"
      }
    ],
    "versionId": "1",
    "id": "deepface-processing",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
{
    "name": "Chatbot Response",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/api/notify",
          "options": {}
        },
        "name": "Webhook Trigger",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          300
        ],
        "webhookId": "chatbot-notification"
      },
      {
        "parameters": {},
        "name": "When clicking \"Execute Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          250,
          450
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/images?status=selected&limit=20",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Selected Images",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          450,
          400
        ]
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{ $json.data.length }}",
                "operation": "notEqual",
                "value2": 0
              }
            ]
          }
        },
        "name": "If Has Selected Images",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          650,
          400
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/users",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Users",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/chatbot/config",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get Chatbot Config",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          850,
          450
        ]
      },
      {
        "parameters": {
          "functionCode": "// Prepare notification messages\nconst inputItems = $input.all();\n\n// Extract data\nconst selectedImages = inputItems[0].json.data || [];\nconst users = inputItems[1].json.data || [];\nconst chatbotConfig = inputItems[2].json || {};\n\n// If no selected images or no users, return early\nif (selectedImages.length === 0 || users.length === 0) {\n  return [\n    {\n      json: {\n        success: false,\n        message: 'No images or users to notify'\n      }\n    }\n  ];\n}\n\n// Prepare message content\nconst imageCount = selectedImages.length;\nconst previewImage = selectedImages[0].thumbnailUrl || selectedImages[0].url;\n\nconst messageText = `ðŸŽ‰ ${imageCount} best photo${imageCount > 1 ? 's' : ''} selected!\\n\\nYour photos have been processed and the best ${imageCount} ${imageCount > 1 ? 'images have' : 'image has'} been selected.\\n\\nView them in your gallery now.`;\n\n// Prepare notification for each user and platform\nconst notifications = [];\n\nusers.forEach(user => {\n  // Prepare Zalo notifications if enabled\n  if (chatbotConfig.zalo?.enabled) {\n    notifications.push({\n      json: {\n        userId: user.id,\n        platform: 'zalo',\n        message: messageText,\n        imageUrl: previewImage,\n        userInfo: {\n          name: user.username,\n          email: user.email\n        }\n      }\n    });\n  }\n  \n  // Prepare Facebook notifications if enabled\n  if (chatbotConfig.facebook?.enabled) {\n    notifications.push({\n      json: {\n        userId: user.id,\n        platform: 'facebook',\n        message: messageText,\n        imageUrl: previewImage,\n        userInfo: {\n          name: user.username,\n          email: user.email\n        }\n      }\n    });\n  }\n});\n\nreturn notifications;"
        },
        "name": "Prepare Notifications",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "name": "Process Each Notification",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 2,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.platform }}",
                "value2": "zalo"
              }
            ]
          }
        },
        "name": "If Zalo",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1450,
          400
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/chatbot/zalo/send",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ $json }}"
        },
        "name": "Send Zalo Message",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          300
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/chatbot/facebook/send",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ $json }}"
        },
        "name": "Send Facebook Message",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          450
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/chatbot/messages",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ {\n  \"userId\": $json.userId,\n  \"message\": $json.message,\n  \"platform\": $json.platform,\n  \"type\": \"notification\"\n} }}"
        },
        "name": "Log Message",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1850,
          400
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "resumeOnFail": true,
          "options": {}
        },
        "name": "Continue Processing",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2050,
          400
        ]
      },
      {
        "parameters": {
          "functionCode": "// Log notification results\nconst items = $input.all();\nconst sentCount = items.length;\n\nconst zaloCount = items.filter(item => item.json.platform === 'zalo').length;\nconst facebookCount = items.filter(item => item.json.platform === 'facebook').length;\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: `Notification sent at ${new Date().toISOString()}`,\n      total: sentCount,\n      zalo: zaloCount,\n      facebook: facebookCount\n    }\n  }\n];"
        },
        "name": "Log Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          2250,
          400
        ]
      }
    ],
    "connections": {
      "Webhook Trigger": {
        "main": [
          [
            {
              "node": "Get Selected Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Get Selected Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Selected Images": {
        "main": [
          [
            {
              "node": "If Has Selected Images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Has Selected Images": {
        "main": [
          [
            {
              "node": "Get Users",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Chatbot Config",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Users": {
        "main": [
          [
            {
              "node": "Prepare Notifications",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Chatbot Config": {
        "main": [
          [
            {
              "node": "Prepare Notifications",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Notifications": {
        "main": [
          [
            {
              "node": "Process Each Notification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Each Notification": {
        "main": [
          [
            {
              "node": "If Zalo",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Zalo": {
        "main": [
          [
            {
              "node": "Send Zalo Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send Facebook Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Zalo Message": {
        "main": [
          [
            {
              "node": "Log Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Facebook Message": {
        "main": [
          [
            {
              "node": "Log Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Message": {
        "main": [
          [
            {
              "node": "Continue Processing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Continue Processing": {
        "main": [
          [
            {
              "node": "Log Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "error-handling"
    },
    "tags": [
      {
        "name": "core-workflows"
      },
      {
        "name": "chatbot"
      }
    ],
    "versionId": "1",
    "id": "chatbot-response",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
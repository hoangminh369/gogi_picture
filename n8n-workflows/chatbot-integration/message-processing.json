{
    "name": "Message Processing",
    "nodes": [
      {
        "parameters": {},
        "name": "When clicking \"Execute Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          250,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Process incoming message from chatbot\nconst messageData = $input.first().json;\n\n// If no message data, return error\nif (!messageData || (!messageData.message && !messageData.userId)) {\n  return [\n    {\n      json: {\n        success: false,\n        error: 'Invalid message data',\n        responseMessage: 'Sorry, I could not process your message.'\n      }\n    }\n  ];\n}\n\n// Normalize the input data\nconst userId = messageData.userId || messageData.senderId || 'unknown';\nconst message = messageData.message || '';\nconst platform = messageData.platform || 'unknown';\nlet messageType = messageData.messageType || messageData.type || 'text';\n\n// For non-text messages, return a simple acknowledgment\nif (messageType !== 'text') {\n  return [\n    {\n      json: {\n        success: true,\n        userId: userId,\n        platform: platform,\n        responseMessage: `Thanks for sending a ${messageType}. I've received it.`\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      userId: userId,\n      message: message,\n      platform: platform,\n      messageType: messageType,\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
        },
        "name": "Extract Message Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Check command patterns in the message\nconst messageData = $input.first().json;\nconst message = messageData.message.toLowerCase().trim();\n\n// Define command patterns\nconst commandPatterns = [\n  { pattern: /^help|^h∆∞·ªõng d·∫´n|^tr·ª£ gi√∫p/, command: 'help' },\n  { pattern: /^·∫£nh ƒë·∫πp|^best photos|^show best/, command: 'show_best' },\n  { pattern: /^x·ª≠ l√Ω ·∫£nh|^process images|^process photos/, command: 'process' },\n  { pattern: /^t√¨nh tr·∫°ng|^status/, command: 'status' },\n  { pattern: /^qu√©t ·∫£nh|^scan photos|^scan drive/, command: 'scan' },\n  { pattern: /^ch√†o|^hi|^hello|^hey/, command: 'greeting' }\n];\n\n// Find matching command\nlet matchedCommand = 'unknown';\nfor (const cmd of commandPatterns) {\n  if (cmd.pattern.test(message)) {\n    matchedCommand = cmd.command;\n    break;\n  }\n}\n\n// Return with the identified command\nreturn [\n  {\n    json: {\n      ...messageData,\n      command: matchedCommand,\n      originalMessage: message\n    }\n  }\n];"
        },
        "name": "Identify Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          650,
          300
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.command }}",
                "value2": "help"
              }
            ]
          }
        },
        "name": "Switch on Command",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Help command response\nconst messageData = $input.first().json;\n\nconst helpMessage = `ü§ñ *H·ªá Th·ªëng Qu·∫£n L√Ω ·∫¢nh Th√¥ng Minh* ü§ñ\\n\\nC√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:\\n\\n‚Ä¢ *·∫¢nh ƒë·∫πp* - Xem c√°c ·∫£nh ƒë·∫πp nh·∫•t ƒë√£ ƒë∆∞·ª£c ch·ªçn\\n‚Ä¢ *X·ª≠ l√Ω ·∫£nh* - Ti·∫øn h√†nh x·ª≠ l√Ω ·∫£nh\\n‚Ä¢ *T√¨nh tr·∫°ng* - Xem th√¥ng tin v·ªÅ h·ªá th·ªëng\\n‚Ä¢ *Qu√©t ·∫£nh* - Qu√©t Google Drive ƒë·ªÉ t√¨m ·∫£nh m·ªõi\\n‚Ä¢ *Tr·ª£ gi√∫p* - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y`;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: helpMessage\n    }\n  }\n];"
        },
        "name": "Help Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          200
        ]
      },
      {
        "parameters": {
          "jsCode": "// Show Best Photos command\nconst messageData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: \"ƒêang t√¨m nh·ªØng ·∫£nh ƒë·∫πp nh·∫•t cho b·∫°n. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...\"\n    }\n  }\n];"
        },
        "name": "Show Best Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          300
        ]
      },
      {
        "parameters": {
          "workflowId": "=image-selection"
        },
        "name": "Execute Image Selection",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          1250,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Process Images command\nconst messageData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: \"ƒêang x·ª≠ l√Ω ·∫£nh. B·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o khi qu√° tr√¨nh ho√†n t·∫•t.\"\n    }\n  }\n];"
        },
        "name": "Process Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "workflowId": "=deepface-processing"
        },
        "name": "Execute Processing",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "jsCode": "// Status command\nconst messageData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: \"ƒêang t·∫£i th√¥ng tin tr·∫°ng th√°i h·ªá th·ªëng...\"\n    }\n  }\n];"
        },
        "name": "Status Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          500
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/system/stats",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Get System Stats",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1250,
          500
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "jsCode": "// Format system stats response\nconst messageData = $input.first().json;\nconst statsResponse = $input.last().json;\n\nlet responseMessage;\n\nif (statsResponse && statsResponse.data) {\n  const stats = statsResponse.data;\n  \n  const bytesToMB = (bytes) => {\n    return Math.round(bytes / (1024 * 1024) * 10) / 10;\n  };\n  \n  responseMessage = `üìä *Th√¥ng tin h·ªá th·ªëng*\\n\\n`;\n  responseMessage += `‚Ä¢ T·ªïng s·ªë ·∫£nh: ${stats.totalImages || 0}\\n`;\n  responseMessage += `‚Ä¢ ·∫¢nh ƒë√£ x·ª≠ l√Ω: ${stats.totalProcessed || 0}\\n`;\n  responseMessage += `‚Ä¢ Khu√¥n m·∫∑t ph√°t hi·ªán: ${stats.totalFacesDetected || 0}\\n`;\n  responseMessage += `‚Ä¢ Dung l∆∞·ª£ng ƒë√£ d√πng: ${bytesToMB(stats.storageUsed || 0)} MB\\n`;\n  \n  if (stats.lastProcessingTime) {\n    responseMessage += `‚Ä¢ X·ª≠ l√Ω l·∫ßn cu·ªëi: ${stats.lastProcessingTime}\\n`;\n  }\n} else {\n  responseMessage = \"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin tr·∫°ng th√°i h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.\";\n}\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: responseMessage\n    }\n  }\n];"
        },
        "name": "Format Stats Response",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1450,
          500
        ]
      },
      {
        "parameters": {
          "jsCode": "// Scan command\nconst messageData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: \"ƒêang qu√©t Google Drive ƒë·ªÉ t√¨m ·∫£nh m·ªõi. B·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o khi qu√° tr√¨nh ho√†n t·∫•t.\"\n    }\n  }\n];"
        },
        "name": "Scan Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          600
        ]
      },
      {
        "parameters": {
          "workflowId": "=google-drive-scanner"
        },
        "name": "Execute Drive Scan",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          1250,
          600
        ]
      },
      {
        "parameters": {
          "jsCode": "// Greeting command\nconst messageData = $input.first().json;\n\n// Get time of day for greeting\nconst hour = new Date().getHours();\nlet greeting = \"Xin ch√†o\";\n\nif (hour < 12) {\n  greeting = \"Ch√†o bu·ªïi s√°ng\";\n} else if (hour < 18) {\n  greeting = \"Ch√†o bu·ªïi chi·ªÅu\";\n} else {\n  greeting = \"Ch√†o bu·ªïi t·ªëi\";\n}\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: `${greeting}! T√¥i l√† tr·ª£ l√Ω qu·∫£n l√Ω ·∫£nh th√¥ng minh. B·∫°n c√≥ th·ªÉ g√µ \"tr·ª£ gi√∫p\" ƒë·ªÉ xem danh s√°ch c√°c l·ªánh t√¥i h·ªó tr·ª£.`\n    }\n  }\n];"
        },
        "name": "Greeting Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          700
        ]
      },
      {
        "parameters": {
          "jsCode": "// Unknown command\nconst messageData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      userId: messageData.userId,\n      platform: messageData.platform,\n      responseMessage: \"Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y g√µ 'tr·ª£ gi√∫p' ƒë·ªÉ xem danh s√°ch c√°c l·ªánh t√¥i h·ªó tr·ª£.\"\n    }\n  }\n];"
        },
        "name": "Unknown Command",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          800
        ]
      },
      {
        "parameters": {
          "resumeOnFail": true,
          "options": {}
        },
        "name": "Combine Responses",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1650,
          500
        ]
      }
    ],
    "connections": {
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Extract Message Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Message Data": {
        "main": [
          [
            {
              "node": "Identify Command",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Identify Command": {
        "main": [
          [
            {
              "node": "Switch on Command",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch on Command": {
        "main": [
          [
            {
              "node": "Help Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Show Best Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Process Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Status Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Scan Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Greeting Command",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Unknown Command",
              "type": "main",
              "index": 0
            }
          ]
        ],
        "output": [
          [
            "help"
          ],
          [
            "show_best"
          ],
          [
            "process"
          ],
          [
            "status"
          ],
          [
            "scan"
          ],
          [
            "greeting"
          ],
          [
            "unknown"
          ]
        ]
      },
      "Help Command": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Show Best Command": {
        "main": [
          [
            {
              "node": "Execute Image Selection",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Image Selection": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Process Command": {
        "main": [
          [
            {
              "node": "Execute Processing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Processing": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 2
            }
          ]
        ]
      },
      "Status Command": {
        "main": [
          [
            {
              "node": "Get System Stats",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get System Stats": {
        "main": [
          [
            {
              "node": "Format Stats Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format Stats Response": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 3
            }
          ]
        ]
      },
      "Scan Command": {
        "main": [
          [
            {
              "node": "Execute Drive Scan",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Drive Scan": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 4
            }
          ]
        ]
      },
      "Greeting Command": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 5
            }
          ]
        ]
      },
      "Unknown Command": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 6
            }
          ]
        ]
      }
    },

    "tags": [
      {
        "name": "chatbot-integration"
      },
      {
        "name": "message-processing"
      }
    ],
    "versionId": "1",
    "id": "message-processing",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
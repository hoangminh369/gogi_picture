{
    "name": "Facebook Webhooks",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "/webhook/facebook",
          "options": {
            "rawBody": true
          }
        },
        "name": "Webhook GET (Verify)",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          200
        ],
        "webhookId": "facebook-webhook-verify"
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/webhook/facebook",
          "options": {
            "responseData": "noData",
            "responseCode": 200,
            "rawBody": true
          }
        },
        "name": "Webhook POST",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          350
        ],
        "webhookId": "facebook-webhook"
      },
      {
        "parameters": {
          "jsCode": "// Handle Facebook verification\nconst query = $input.first().json.query || {};\n\nconst mode = query['hub.mode'];\nconst token = query['hub.verify_token'];\nconst challenge = query['hub.challenge'];\n\n// Verify the token from environment variable\nconst verifyToken = $env.FACEBOOK_VERIFY_TOKEN;\n\nif (mode === 'subscribe' && token === verifyToken) {\n  return [\n    {\n      json: {\n        type: 'verification',\n        success: true,\n        challenge: challenge\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        type: 'verification',\n        success: false,\n        error: 'Invalid verification token'\n      }\n    }\n  ];\n}"
        },
        "name": "Handle Verification",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          200
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.success }}",
                "value2": "true"
              }
            ]
          }
        },
        "name": "Is Valid Verification",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          650,
          200
        ]
      },
      {
        "parameters": {
          "jsCode": "// Return challenge for Facebook to verify the webhook\nconst challenge = $input.first().json.challenge;\n\nreturn [\n  {\n    json: challenge\n  }\n];"
        },
        "name": "Return Challenge",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          850,
          150
        ],
        "executeOnce": true
      },
      {
        "parameters": {
          "jsCode": "// Return error for invalid verification\nreturn [\n  {\n    json: {\n      success: false,\n      error: 'Failed verification'\n    }\n  }\n];"
        },
        "name": "Return Error",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          850,
          250
        ],
        "executeOnce": true
      },
      {
        "parameters": {
          "jsCode": "// Extract webhook data from Facebook\nconst webhookData = $input.first().json.body || {};\n\n// Facebook sends an object with 'entry' array containing the messages\nif (!webhookData.entry || !Array.isArray(webhookData.entry)) {\n  return [\n    {\n      json: {\n        success: false,\n        error: 'Invalid webhook data format'\n      }\n    }\n  ];\n}\n\n// Process the first entry\nlet messages = [];\n\nfor (const entry of webhookData.entry) {\n  // Each entry may have messaging array\n  if (entry.messaging && Array.isArray(entry.messaging)) {\n    for (const messagingEvent of entry.messaging) {\n      const senderId = messagingEvent.sender?.id;\n      const recipientId = messagingEvent.recipient?.id;\n      \n      let messageType = '';\n      let messageContent = '';\n      let attachments = [];\n      \n      // Check what kind of message it is\n      if (messagingEvent.message) {\n        if (messagingEvent.message.text) {\n          messageType = 'text';\n          messageContent = messagingEvent.message.text;\n        } else if (messagingEvent.message.attachments) {\n          attachments = messagingEvent.message.attachments;\n          \n          // Check the type of the first attachment\n          if (attachments.length > 0) {\n            const firstAttachment = attachments[0];\n            messageType = firstAttachment.type || 'attachment';\n            \n            if (messageType === 'image') {\n              messageContent = firstAttachment.payload?.url || 'Image attachment';\n            } else {\n              messageContent = `${messageType} attachment`;\n            }\n          } else {\n            messageType = 'attachment';\n            messageContent = 'Unknown attachment';\n          }\n        }\n      } else if (messagingEvent.postback) {\n        messageType = 'postback';\n        messageContent = messagingEvent.postback.payload || 'Postback received';\n      }\n      \n      messages.push({\n        platform: 'facebook',\n        senderId,\n        recipientId,\n        messageType,\n        message: messageContent,\n        attachments,\n        rawEvent: messagingEvent,\n        timestamp: messagingEvent.timestamp\n      });\n    }\n  }\n}\n\n// Return the extracted messages\nif (messages.length === 0) {\n  return [\n    {\n      json: {\n        success: true,\n        message: 'No messages found in webhook data',\n        rawData: webhookData\n      }\n    }\n  ];\n}\n\nreturn messages.map(msg => ({ json: msg }));"
        },
        "name": "Extract Messages",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          350
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "name": "Process Each Message",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 2,
        "position": [
          650,
          350
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.messageType }}",
                "value2": "text"
              }
            ]
          }
        },
        "name": "Is Text Message",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          850,
          350
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/chatbot/messages",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"userId\": \"{{ $json.senderId }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"type\": \"{{ $json.messageType }}\"\n}"
        },
        "name": "Log Text Message",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1050,
          300
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "workflowId": "=message-processing"
        },
        "name": "Process Text Message",
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1,
        "position": [
          1250,
          300
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/chatbot/messages",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"userId\": \"{{ $json.senderId }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"type\": \"{{ $json.messageType }}\"\n}"
        },
        "name": "Log Non-Text Message",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1050,
          400
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "jsCode": "// For non-text messages (like images), generate an acknowledgment response\nreturn [\n  {\n    json: {\n      userId: $input.first().json.senderId,\n      responseMessage: `Thanks for sending a ${$input.first().json.messageType}. I've received it.`,\n      platform: 'facebook'\n    }\n  }\n];"
        },
        "name": "Generate Acknowledgment",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1250,
          400
        ]
      },
      {
        "parameters": {
          "resumeOnFail": true,
          "options": {}
        },
        "name": "Combine Responses",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1450,
          350
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://graph.facebook.com/v12.0/me/messages",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "access_token",
                "value": "={{ $env.FACEBOOK_PAGE_TOKEN }}"
              }
            ]
          },
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"recipient\": {\n    \"id\": \"{{ $json.userId }}\"\n  },\n  \"message\": {\n    \"text\": \"{{ $json.responseMessage }}\"\n  }\n}"
        },
        "name": "Send Facebook Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          350
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "jsCode": "// Log results of Facebook message processing\nconst items = $input.all();\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: `Processed ${items.length} messages from Facebook Messenger`,\n      processedAt: new Date().toISOString()\n    }\n  }\n];"
        },
        "name": "Log Results",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1850,
          350
        ]
      }
    ],
    "connections": {
      "Webhook GET (Verify)": {
        "main": [
          [
            {
              "node": "Handle Verification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook POST": {
        "main": [
          [
            {
              "node": "Extract Messages",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle Verification": {
        "main": [
          [
            {
              "node": "Is Valid Verification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is Valid Verification": {
        "main": [
          [
            {
              "node": "Return Challenge",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Return Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Messages": {
        "main": [
          [
            {
              "node": "Process Each Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Each Message": {
        "main": [
          [
            {
              "node": "Is Text Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is Text Message": {
        "main": [
          [
            {
              "node": "Log Text Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Log Non-Text Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Text Message": {
        "main": [
          [
            {
              "node": "Process Text Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Text Message": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Non-Text Message": {
        "main": [
          [
            {
              "node": "Generate Acknowledgment",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Acknowledgment": {
        "main": [
          [
            {
              "node": "Combine Responses",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Combine Responses": {
        "main": [
          [
            {
              "node": "Send Facebook Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Facebook Response": {
        "main": [
          [
            {
              "node": "Log Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "error-handling"
    },
    "tags": [
      {
        "name": "chatbot-integration"
      },
      {
        "name": "facebook"
      }
    ],
    "versionId": "1",
    "id": "facebook-webhooks",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
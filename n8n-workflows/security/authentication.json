{
    "name": "Authentication",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "/api/auth/login",
          "options": {
            "rawBody": true
          }
        },
        "name": "Login Endpoint",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          300
        ],
        "webhookId": "auth-login"
      },
      {
        "parameters": {
          "jsCode": "// Extract login credentials\nconst requestData = $input.first().json;\nlet username, password;\n\ntry {\n  // Try to parse body if it's a string\n  if (requestData.body && typeof requestData.body === 'string') {\n    const parsedBody = JSON.parse(requestData.body);\n    username = parsedBody.username;\n    password = parsedBody.password;\n  } else if (requestData.body) {\n    // Body is already an object\n    username = requestData.body.username;\n    password = requestData.body.password;\n  }\n} catch (e) {\n  // Error parsing JSON\n}\n\n// If credentials not found, return error\nif (!username || !password) {\n  return [\n    {\n      json: {\n        success: false,\n        message: 'Username and password required',\n        statusCode: 400\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      username,\n      password,\n      clientIp: requestData.ip || 'unknown',\n      userAgent: requestData.headers?.['user-agent'] || 'unknown',\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
        },
        "name": "Extract Credentials",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          300
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "=http://localhost:5678/api/users?username={{ $json.username }}",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "name": "Find User",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          650,
          300
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{ $json.success && $json.data && $json.data.length > 0 }}",
                "value2": true
              }
            ]
          }
        },
        "name": "User Exists",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Verify password - in a real system this would use proper password hashing\nconst userData = $input.all();\nconst credentials = userData[0].json;\nconst userResponse = userData[1].json;\nconst user = userResponse.data[0];\n\n// Demo accounts for testing\nlet isValid = false;\n\n// IMPORTANT: In a real system, you would NEVER store passwords this way!\n// This is just for demo purposes\nif ((credentials.username === 'admin' && credentials.password === 'admin123') ||\n    (credentials.username === 'user' && credentials.password === 'user123')) {\n  isValid = true;\n}\n\nreturn [\n  {\n    json: {\n      username: credentials.username,\n      clientIp: credentials.clientIp,\n      userAgent: credentials.userAgent,\n      userId: user.id,\n      role: user.role,\n      isValid\n    }\n  }\n];"
        },
        "name": "Verify Password",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          200
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{ $json.isValid }}",
                "value2": true
              }
            ]
          }
        },
        "name": "Is Valid Password",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1250,
          200
        ]
      },
      {
        "parameters": {
          "jsCode": "// Generate JWT token\nconst userData = $input.first().json;\nconst jwt = require('jsonwebtoken');\n\n// Get JWT secret from environment\nconst jwtSecret = $env.JWT_SECRET || 'default-secret-for-demo-only';\n\n// Create token payload\nconst payload = {\n  sub: userData.userId,\n  username: userData.username,\n  role: userData.role,\n  iat: Math.floor(Date.now() / 1000),\n  exp: Math.floor(Date.now() / 1000) + (60 * 60 * 24) // 24 hours\n};\n\n// Sign the token\nconst token = jwt.sign(payload, jwtSecret);\n\nreturn [\n  {\n    json: {\n      success: true,\n      message: 'Login successful',\n      token,\n      user: {\n        id: userData.userId,\n        username: userData.username,\n        role: userData.role\n      }\n    }\n  }\n];"
        },
        "name": "Generate Token",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1450,
          100
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/system/logs",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"level\": \"info\",\n  \"message\": \"User login successful: {{ $json.user.username }}\",\n  \"details\": {\n    \"userId\": \"{{ $json.user.id }}\",\n    \"username\": \"{{ $json.user.username }}\",\n    \"role\": \"{{ $json.user.role }}\",\n    \"timestamp\": \"{{ $now }}\"\n  }\n}"
        },
        "name": "Log Success",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          100
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "jsCode": "// Failed login\nconst userData = $input.first().json;\n\nreturn [\n  {\n    json: {\n      success: false,\n      message: 'Invalid username or password',\n      statusCode: 401\n    }\n  }\n];"
        },
        "name": "Invalid Password",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1450,
          300
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/system/logs",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"level\": \"warn\",\n  \"message\": \"Failed login attempt for user: {{ $json.username }}\",\n  \"details\": {\n    \"username\": \"{{ $json.username }}\",\n    \"clientIp\": \"{{ $json.clientIp }}\",\n    \"userAgent\": \"{{ $json.userAgent }}\",\n    \"timestamp\": \"{{ $now }}\"\n  }\n}"
        },
        "name": "Log Failed Attempt",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1650,
          300
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "jsCode": "// User not found\nconst credentials = $input.first().json;\n\nreturn [\n  {\n    json: {\n      success: false,\n      message: 'Invalid username or password',\n      statusCode: 401,\n      username: credentials.username,\n      clientIp: credentials.clientIp,\n      userAgent: credentials.userAgent\n    }\n  }\n];"
        },
        "name": "User Not Found",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1050,
          400
        ]
      },
      {
        "parameters": {
          "resumeOnFail": true,
          "options": {}
        },
        "name": "Combine Results",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1850,
          200
        ]
      },
      {
        "parameters": {
          "httpMethod": "GET",
          "path": "/api/auth/verify",
          "options": {}
        },
        "name": "Token Verify Endpoint",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          250,
          600
        ],
        "webhookId": "auth-verify"
      },
      {
        "parameters": {
          "jsCode": "// Extract token from Authorization header\nconst requestData = $input.first().json;\nlet token = '';\n\nif (requestData.headers && requestData.headers.authorization) {\n  const authHeader = requestData.headers.authorization;\n  \n  // Check if it's a Bearer token\n  if (authHeader.startsWith('Bearer ')) {\n    token = authHeader.substring(7);\n  }\n}\n\nif (!token) {\n  return [\n    {\n      json: {\n        success: false,\n        message: 'No token provided',\n        statusCode: 401\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      token,\n      clientIp: requestData.ip || 'unknown',\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
        },
        "name": "Extract Token",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          600
        ]
      },
      {
        "parameters": {
          "jsCode": "// Verify JWT token\nconst tokenData = $input.first().json;\nconst jwt = require('jsonwebtoken');\n\n// Get JWT secret from environment\nconst jwtSecret = $env.JWT_SECRET || 'default-secret-for-demo-only';\n\ntry {\n  // Verify and decode the token\n  const decoded = jwt.verify(tokenData.token, jwtSecret);\n  \n  return [\n    {\n      json: {\n        success: true,\n        user: {\n          id: decoded.sub,\n          username: decoded.username,\n          role: decoded.role\n        },\n        exp: decoded.exp\n      }\n    }\n  ];\n} catch (err) {\n  // Token verification failed\n  return [\n    {\n      json: {\n        success: false,\n        message: 'Invalid or expired token',\n        error: err.message,\n        statusCode: 401\n      }\n    }\n  ];\n}"
        },
        "name": "Verify Token",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          650,
          600
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/system/logs",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"level\": \"info\",\n  \"message\": \"{{ $json.success ? 'Token verification successful' : 'Token verification failed' }}\",\n  \"details\": {\n    \"success\": {{ $json.success }},\n    \"username\": \"{{ $json.user?.username || 'unknown' }}\",\n    \"clientIp\": \"{{ $json.clientIp || 'unknown' }}\",\n    \"timestamp\": \"{{ $now }}\"\n  }\n}"
        },
        "name": "Log Verification",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          850,
          600
        ],
        "continueOnFail": true
      }
    ],
    "connections": {
      "Login Endpoint": {
        "main": [
          [
            {
              "node": "Extract Credentials",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Credentials": {
        "main": [
          [
            {
              "node": "Find User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Find User": {
        "main": [
          [
            {
              "node": "User Exists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "User Exists": {
        "main": [
          [
            {
              "node": "Verify Password",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "User Not Found",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Verify Password": {
        "main": [
          [
            {
              "node": "Is Valid Password",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is Valid Password": {
        "main": [
          [
            {
              "node": "Generate Token",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Invalid Password",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Token": {
        "main": [
          [
            {
              "node": "Log Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Success": {
        "main": [
          [
            {
              "node": "Combine Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Invalid Password": {
        "main": [
          [
            {
              "node": "Log Failed Attempt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Failed Attempt": {
        "main": [
          [
            {
              "node": "Combine Results",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "User Not Found": {
        "main": [
          [
            {
              "node": "Log Failed Attempt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Token Verify Endpoint": {
        "main": [
          [
            {
              "node": "Extract Token",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Token": {
        "main": [
          [
            {
              "node": "Verify Token",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Verify Token": {
        "main": [
          [
            {
              "node": "Log Verification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromAnyOwner",
      "errorWorkflow": "error-handling"
    },
    "tags": [
      {
        "name": "security"
      },
      {
        "name": "authentication"
      }
    ],
    "versionId": "1",
    "id": "authentication",
    "meta": {
      "instanceId": "local-instance"
    }
  } 
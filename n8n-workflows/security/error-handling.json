{
    "name": "Error Handling",
    "nodes": [
      {
        "parameters": {},
        "name": "Start",
        "type": "n8n-nodes-base.start",
        "typeVersion": 1,
        "position": [
          250,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Extract error data\nconst executionData = $execution.current;\nconst workflowData = $execution.workflow;\n\n// Get error information\nconst error = {};\n\ntry {\n  error.message = executionData.data.resultData.error.message;\n  error.stack = executionData.data.resultData.error.stack;\n} catch (e) {\n  error.message = 'Unknown error (details not available)';\n  error.stack = 'No stack trace available';\n}\n\n// Get workflow information\nconst workflow = {\n  id: workflowData.id || 'unknown',\n  name: workflowData.name || 'unknown',\n  active: workflowData.active\n};\n\n// Get node information (where the error occurred)\nlet lastNodeExecuted = 'unknown';\nlet nodeError = {};\n\ntry {\n  // Find the node that caused the error\n  for (const nodeName in executionData.data.resultData.lastNodeExecuted) {\n    lastNodeExecuted = nodeName;\n    break;\n  }\n  \n  // Get error details from the node\n  if (lastNodeExecuted !== 'unknown') {\n    nodeError = executionData.data.resultData.lastNodeExecuted[lastNodeExecuted];\n  }\n} catch (e) {\n  // Do nothing, use defaults\n}\n\nreturn [\n  {\n    json: {\n      timestamp: new Date().toISOString(),\n      error: {\n        message: error.message,\n        stack: error.stack\n      },\n      workflow: {\n        id: workflow.id,\n        name: workflow.name,\n        active: workflow.active\n      },\n      execution: {\n        id: executionData.id,\n        mode: executionData.mode,\n        retryOf: executionData.retryOf,\n        startedAt: executionData.startedAt\n      },\n      node: {\n        name: lastNodeExecuted,\n        errorDetails: nodeError\n      }\n    }\n  }\n];"
        },
        "name": "Extract Error Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          450,
          300
        ]
      },
      {
        "parameters": {
          "content": "=## Error in workflow: {{ $json.workflow.name }}\n\n**Time:** {{ $json.timestamp }}\n**Error:** {{ $json.error.message }}\n**Node:** {{ $json.node.name }}\n\n### Error Details:\n```\n{{ $json.error.stack }}\n```\n\n### Execution Information:\n- **ID:** {{ $json.execution.id }}\n- **Mode:** {{ $json.execution.mode }}\n- **Started:** {{ $json.execution.startedAt }}\n\n### Workflow Information:\n- **ID:** {{ $json.workflow.id }}\n- **Active:** {{ $json.workflow.active }}\n",
          "options": {}
        },
        "name": "Format Error Message",
        "type": "n8n-nodes-base.markdown",
        "typeVersion": 1,
        "position": [
          650,
          300
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=http://localhost:5678/api/system/logs",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"level\": \"error\",\n  \"message\": \"Workflow Error: {{ $json.workflow.name }} - {{ $json.error.message }}\",\n  \"details\": {\n    \"workflowId\": \"{{ $json.workflow.id }}\",\n    \"nodeName\": \"{{ $json.node.name }}\",\n    \"executionId\": \"{{ $json.execution.id }}\",\n    \"timestamp\": \"{{ $json.timestamp }}\",\n    \"stack\": \"{{ $json.error.stack }}\"\n  }\n}"
        },
        "name": "Log Error",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          850,
          300
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.workflow.id }}",
                "operation": "notEqual",
                "value2": "error-handling"
              }
            ]
          }
        },
        "name": "Is Not Error Workflow",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1050,
          300
        ]
      },
      {
        "parameters": {
          "to": "={{ $env.ADMIN_EMAIL }}",
          "subject": "=Workflow Error: {{ $json.workflow.name }}",
          "text": "={{ $node[\"Format Error Message\"].json }}",
          "options": {}
        },
        "name": "Send Error Email",
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 2,
        "position": [
          1250,
          200
        ]
      }
    ],
    "connections": {
      "Start": {
        "main": [
          [
            {
              "node": "Extract Error Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Error Data": {
        "main": [
          [
            {
              "node": "Format Error Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format Error Message": {
        "main": [
          [
            {
              "node": "Log Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Log Error": {
        "main": [
          [
            {
              "node": "Is Not Error Workflow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is Not Error Workflow": {
        "main": [
          [
            {
              "node": "Send Error Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1",
      "saveExecutionProgress": true,
      "callerPolicy": "workflowsFromSameOwner"
    },
    "tags": [
      {
        "name": "security"
      },
      {
        "name": "error-handling"
      }
    ],
    "versionId": "1",
    "id": "error-handling",
    "meta": {
      "instanceId": "local-instance"
    }
  } 